/*
 * CHECKPOINT - April 21, 2024
 * Current State:
 * - Net price calculator with full cost breakdown and payment visualization
 * - Automatic zip code-based income estimation
 * - In-state/out-of-state tuition handling
 * - Housing toggle (on/off campus)
 * - Payment breakdown with adjustable sliders for family contribution and work-study
 * - Cost visualization with annual vs total program cost toggle
 * - Rounding to nearest 100 for cleaner numbers
 * - Support for transfer students with remaining years calculation
 * - Save calculation functionality with custom naming
 */

import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Switch } from "@/components/ui/switch";
import { Slider } from "@/components/ui/slider";
import { useQuery, useMutation } from "@tanstack/react-query";
import { queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import {
  Loader2,
  DollarSign,
  Check,
  X,
  Search,
  Home,
  Building,
  Save,
  ChevronDown,
  ChevronUp,
} from "lucide-react";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Link } from "wouter";
import { AuthProps } from "@/interfaces/auth";
import PriceCharts from "@/components/calculator/PriceCharts";
import { FavoritesService, FavoriteCollege } from "@/services/favoritesService";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface College {
  id: number;
  name: string;
  location: string;
  state: string;
  type: string;
  tuition: number;
  roomAndBoard: number;
  acceptanceRate: number | null;
  rating: number | null;
  size: string | null;
  rank: number | null;
  feesByIncome:
    | string
    | null
    | {
        [key: string]: number;
      };
  usNewsTop150: number | null;
  bestLiberalArtsColleges: number | null;
}

interface ZipCodeIncome {
  id: number;
  state: string;
  zip_code: string;
  mean_income: number;
  estimated_investments: number;
  home_value: number | null;
}

interface CollegeCalculation {
  id?: number;
  userId: number;
  collegeId: number;
  netPrice: number;
  inState: boolean;
  familyContribution: number;
  workStudy: number;
  studentLoanAmount: number;
  financialAid: number;
  householdIncome: number;
  householdSize: number;
  zip: string;
  tuitionUsed: number;
  roomAndBoardUsed: number;
  onCampusHousing: boolean;
  totalCost: number;
  notes: string;
  calculationDate?: string;
  includedInProjection?: boolean;
}

interface NetPriceCalculatorProps extends AuthProps {}

const NetPriceCalculator = (props: NetPriceCalculatorProps) => {
  const { toast } = useToast();
  const [selectedCollegeId, setSelectedCollegeId] = useState<number | null>(
    null
  );
  const [zipCode, setZipCode] = useState("");
  const [householdIncome, setHouseholdIncome] = useState("");
  const [estimatedIncome, setEstimatedIncome] = useState<number | null>(null);
  const [usingEstimatedIncome, setUsingEstimatedIncome] = useState(false);
  const [investmentAssets, setInvestmentAssets] = useState("");
  const [estimatedInvestments, setEstimatedInvestments] = useState<
    number | null
  >(null);
  const [usingEstimatedInvestments, setUsingEstimatedInvestments] =
    useState(false);
  const [homeValue, setHomeValue] = useState("");
  const [estimatedHomeValue, setEstimatedHomeValue] = useState<number | null>(
    null
  );
  const [usingEstimatedHomeValue, setUsingEstimatedHomeValue] = useState(false);
  const [homeOwnership, setHomeOwnership] = useState<"own" | "rent">("rent");
  const [householdSize, setHouseholdSize] = useState("4");
  const [householdStructure, setHouseholdStructure] = useState("two_parents");
  const [calculated, setCalculated] = useState(false);
  const [fetchingZipCode, setFetchingZipCode] = useState(false);
  const [onCampusHousing, setOnCampusHousing] = useState(true);
  const [isInState, setIsInState] = useState(false);
  const [userState, setUserState] = useState<string | null>(null);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [calculationName, setCalculationName] = useState("");
  const [showAdvancedOptions, setShowAdvancedOptions] = useState(false);
  const [localZipCodeData, setLocalZipCodeData] =
    useState<ZipCodeIncome | null>(null);
  const [showZipCodeEditor, setShowZipCodeEditor] = useState(false);
  const [showTotalCost, setShowTotalCost] = useState(false);
  const [isTransferStudent, setIsTransferStudent] = useState(false);
  const [yearsCompleted, setYearsCompleted] = useState(0);

  // Add a safe formatting function to prevent undefined.toLocaleString() errors
  const safeNumberFormat = (value: number | null | undefined): string => {
    if (value == null) return "0"; // Handle both null and undefined
    return value.toLocaleString();
  };

  // Get user ID from auth props with safety checks
  const userId = props.user?.id;
  const isAuthenticated = props.isAuthenticated || false;

  // Add a state to track if user is in guest mode
  const [isGuestMode, setIsGuestMode] = useState(!isAuthenticated);

  // Update guest mode when authentication status changes
  useEffect(() => {
    setIsGuestMode(!isAuthenticated);
  }, [isAuthenticated]);

  // Query to fetch the user profile only if user is authenticated
  const {
    data: userData,
    isLoading: isLoadingUser,
    isError: userDataError,
  } = useQuery({
    queryKey: ["/api/users", userId],
    queryFn: async () => {
      if (!userId) return null;
      try {
        const response = await fetch(`/api/users/${userId}`);
        if (!response.ok) {
          console.log(`Error fetching user data: ${response.status}`);
          return null;
        }
        return response.json();
      } catch (error) {
        console.error("Exception while fetching user data:", error);
        return null;
      }
    },
    enabled: !!userId && isAuthenticated, // Only run query if userId exists and user is authenticated
    retry: 1, // Limit retries for 401 errors
    onError: (error) => {
      console.error("Error in user data query:", error);
      // If we get authentication errors, switch to guest mode
      setIsGuestMode(true);
    },
  });

  // Set the user's zip code once the profile is loaded
  useEffect(() => {
    console.log("User Data Loaded:", userData);

    if (userData && userData.zipCode) {
      console.log("Using profile zip code:", userData.zipCode);
      setZipCode(userData.zipCode);

      // Optionally auto-fetch income data if zip code is available
      if (userData.zipCode.length === 5) {
        console.log("Auto-fetching income data for zip:", userData.zipCode);
        fetchIncomeData(userData.zipCode);
      }
    } else {
      console.log("No user data or zip code available");
    }
  }, [userData]);

  // Query to fetch favorite colleges using FavoritesService with better error handling
  const {
    data: favoriteColleges = [],
    isLoading: isLoadingFavorites,
    isError: favoritesError,
  } = useQuery({
    queryKey: ["/api/favorites/colleges", userId],
    queryFn: async () => {
      if (!userId) return [];
      try {
        const colleges = await FavoritesService.getFavoriteColleges(userId);
        return colleges;
      } catch (error) {
        console.error("Error fetching favorite colleges:", error);
        return [];
      }
    },
    enabled: !!userId && isAuthenticated,
    retry: 1,
    onError: (error) => {
      console.error("Error in favorites query:", error);
      // Don't block the calculator if favorites fail to load
      return [];
    },
  });

  // Add a notification banner for guest mode
  const renderGuestModeBanner = () => {
    if (isGuestMode) {
      return (
        <Alert className="mb-6 bg-amber-50 border-amber-200">
          <DollarSign className="h-5 w-5 text-amber-500" />
          <AlertDescription>
            <span className="font-medium">
              You're using the calculator in guest mode.
            </span>
            <span className="block text-sm mt-1">
              <Link to="/login" className="text-primary underline">
                Sign in
              </Link>{" "}
              to save your calculations and access your favorite colleges.
            </span>
          </AlertDescription>
        </Alert>
      );
    }
    return null;
  };

  // Query for fetching income data by zip code
  const {
    data: zipCodeData,
    isLoading: isLoadingZipCode,
    error: zipCodeError,
    refetch: refetchZipCode,
  } = useQuery({
    queryKey: ["/api/zip-code-income/zip", zipCode],
    queryFn: async () => {
      if (!zipCode || zipCode.length < 5) return null;
      const response = await fetch(`/api/zip-code-income/zip/${zipCode}`);
      if (!response.ok) {
        throw new Error("Failed to fetch income data for this zip code");
      }
      return response.json() as Promise<ZipCodeIncome>;
    },
    enabled: false, // We'll trigger this manually
  });

  // Function to fetch income data based on zip code
  const fetchIncomeData = (zip: string) => {
    if (zip.length === 5) {
      setFetchingZipCode(true);

      // Clear existing data first to avoid stale information
      setLocalZipCodeData(null);

      fetch(`/api/zip-code-income/zip/${zip}`)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Zip code data not found");
          }
          return response.json();
        })
        .then((data) => {
          console.log("üìç Received zip code data:", data);

          // Store complete zip code data
          setLocalZipCodeData(data);

          // Set income data
          setEstimatedIncome(data.mean_income);
          setUsingEstimatedIncome(true);
          setHouseholdIncome(data.mean_income.toString());

          // Set investment assets data
          if (data.estimated_investments) {
            setEstimatedInvestments(data.estimated_investments);
            setUsingEstimatedInvestments(true);
            setInvestmentAssets(data.estimated_investments.toString());
          }

          // Set home value data if available
          if (data.home_value) {
            setEstimatedHomeValue(data.home_value);
            setUsingEstimatedHomeValue(true);
            setHomeValue(data.home_value.toString());
          }

          // CRITICAL FIX: Set the user's state code for in-state tuition determination
          if (data.state) {
            console.log(
              `üìç Setting user state to: "${data.state}" from zip code ${zip}`
            );
            setUserState(data.state);
          }

          toast({
            title: "Financial Estimates Found",
            description: `Based on ${zip}, we've estimated your financial information.`,
          });
        })
        .catch((err) => {
          console.error("Error fetching zip code income:", err);
          toast({
            variant: "destructive",
            title: "No data available",
            description:
              "We couldn't find data for this zip code. Please enter your information manually.",
          });
        })
        .finally(() => {
          setFetchingZipCode(false);
        });
    }
  };

  // Extract college data from favorite colleges
  const favoriteCollegesList = favoriteColleges.length
    ? favoriteColleges.map((favorite: any) => favorite.college || favorite)
    : [];

  // Function to parse fees by income if it's a string
  const parseFeesByIncome = (college: College) => {
    console.log(
      "Parsing fees structure for:",
      college.name,
      college.feesByIncome
    );

    if (!college.feesByIncome) {
      // If no fee structure at all, create a default structure based on tuition
      console.log("No fee structure found, creating default based on tuition");
      const tuition = college.tuition || 0;
      college.feesByIncome = {
        "0-30000": Math.round(tuition * 0.3), // 30% of tuition for lowest bracket
        "30001-48000": Math.round(tuition * 0.4),
        "48001-75000": Math.round(tuition * 0.6),
        "75001-110000": Math.round(tuition * 0.8),
        "110001+": tuition,
      };
      return college;
    }

    // Handle string representation of feesByIncome
    if (typeof college.feesByIncome === "string") {
      try {
        college.feesByIncome = JSON.parse(college.feesByIncome);
        console.log("Successfully parsed fee structure:", college.feesByIncome);
      } catch (e) {
        console.error("Error parsing feesByIncome for college:", college.name);
        // Create fallback structure if parsing fails
        const tuition = college.tuition || 0;
        college.feesByIncome = {
          "0-30000": Math.round(tuition * 0.3),
          "30001-48000": Math.round(tuition * 0.4),
          "48001-75000": Math.round(tuition * 0.6),
          "75001-110000": Math.round(tuition * 0.8),
          "110001+": tuition,
        };
      }
    }

    return college;
  };

  // Fixed process college data to ensure all properties are valid numbers with defaults
  const processColleges = (colleges: any[]) => {
    return colleges.map((college: College) => {
      // Ensure tuition and roomAndBoard have default values if missing
      if (college.tuition === undefined || college.tuition === null) {
        college.tuition = 0;
        console.log(
          `Warning: College ${college.name} has null tuition, using default 0`
        );
      }

      if (college.roomAndBoard === undefined || college.roomAndBoard === null) {
        college.roomAndBoard = 15000; // Default value for room and board if missing
        console.log(
          `Warning: College ${college.name} has null roomAndBoard, using default 15000`
        );
      }

      // Handle fee structure
      return parseFeesByIncome(college);
    });
  };

  // Use the enhanced processor
  const processedColleges = processColleges(favoriteCollegesList);

  // Find the selected college
  const selectedCollege = selectedCollegeId
    ? processedColleges.find(
        (college: College) => college.id === selectedCollegeId
      )
    : null;

  // Add an effect to update the UI when zip code income data is available from React Query
  useEffect(() => {
    if (zipCodeData) {
      // Synchronize React Query zipCodeData with our local state
      setLocalZipCodeData(zipCodeData);

      if (zipCodeData.mean_income) {
        setEstimatedIncome(zipCodeData.mean_income);
        setUsingEstimatedIncome(true);
        setHouseholdIncome(zipCodeData.mean_income.toString());
      }
      if (zipCodeData.estimated_investments) {
        setEstimatedInvestments(zipCodeData.estimated_investments);
        setUsingEstimatedInvestments(true);
        setInvestmentAssets(zipCodeData.estimated_investments.toString());
      }
      if (zipCodeData.home_value) {
        setEstimatedHomeValue(zipCodeData.home_value);
        setUsingEstimatedHomeValue(true);
        setHomeValue(zipCodeData.home_value.toString());
      }
      if (zipCodeData.state) {
        setUserState(zipCodeData.state);
      }
    }
  }, [zipCodeData]);

  // Add an effect to update the UI when our local zip code data changes
  useEffect(() => {
    if (localZipCodeData) {
      if (localZipCodeData.mean_income) {
        setEstimatedIncome(localZipCodeData.mean_income);
        setUsingEstimatedIncome(true);
        setHouseholdIncome(localZipCodeData.mean_income.toString());
      }
      if (localZipCodeData.estimated_investments) {
        setEstimatedInvestments(localZipCodeData.estimated_investments);
        setUsingEstimatedInvestments(true);
        setInvestmentAssets(localZipCodeData.estimated_investments.toString());
      }
      if (localZipCodeData.home_value) {
        setEstimatedHomeValue(localZipCodeData.home_value);
        setUsingEstimatedHomeValue(true);
        setHomeValue(localZipCodeData.home_value.toString());
      }
      if (localZipCodeData.state) {
        setUserState(localZipCodeData.state);
      }
    }
  }, [localZipCodeData]);

  // Initialize in-state status when college or user state changes
  useEffect(() => {
    // Display zip code data for debugging
    console.log("Zip Code Data (from React Query):", zipCodeData);
    console.log("Zip Code Data (local):", localZipCodeData);
    console.log("Current User State:", userState);

    if (!selectedCollege) {
      console.log("No college selected yet");
      return;
    }

    console.log(
      "Selected College:",
      selectedCollege.name,
      selectedCollege.state
    );

    // Check if college is public - only public schools have in-state/out-of-state
    const isPublic =
      selectedCollege.type &&
      selectedCollege.type.toLowerCase().includes("public");

    // For non-public schools, in-state/out-of-state doesn't matter
    if (!isPublic) {
      console.log(
        "üìö College is private/non-public, in-state status does not apply"
      );
      setIsInState(true); // Default to true for non-public schools
      return;
    }

    // Only proceed if we have both values needed for comparison
    if (selectedCollege && userState) {
      // Get state codes and normalize them (trim whitespace, uppercase)
      const collegeState = selectedCollege.state || "";
      const userStateNormalized = userState.toUpperCase().trim();
      const collegeStateNormalized = collegeState.toUpperCase().trim();

      // Debug information
      console.log("üîç State Comparison for PUBLIC college:");
      console.log(`- User zip code: ${zipCode}`);
      console.log(`- User state code (normalized): "${userStateNormalized}"`);
      console.log(
        `- College state code (normalized): "${collegeStateNormalized}"`
      );

      // Check if the states match
      const isMatch = userStateNormalized === collegeStateNormalized;
      console.log(
        `‚úÖ In-state match result: ${isMatch ? "MATCHED" : "NOT MATCHED"}`
      );

      // Force update the in-state status and log it
      setIsInState(isMatch);
      console.log(
        `üè´ College will use ${isMatch ? "IN-STATE" : "OUT-OF-STATE"} tuition rates`
      );
    } else {
      // If we're missing state data but have a public college, default to out-of-state
      if (isPublic) {
        console.log(
          "‚ö†Ô∏è Missing state data for comparison, defaulting to OUT-OF-STATE tuition"
        );
        setIsInState(false);
      }
    }
  }, [selectedCollege, userState, zipCode, zipCodeData, localZipCodeData]);

  const calculateNetPrice = () => {
    if (!selectedCollege || !householdIncome) return 0; // Return 0 instead of null

    // Get the income bracket
    let incomeBracket = "110001+";
    const income = parseInt(householdIncome, 10);

    if (income <= 30000) incomeBracket = "0-30000";
    else if (income <= 48000) incomeBracket = "30001-48000";
    else if (income <= 75000) incomeBracket = "48001-75000";
    else if (income <= 110000) incomeBracket = "75001-110000";

    // Get the base price from the fees by income bracket
    // Add null checks and proper type handling
    let adjustedPrice = 0;

    // Log the fees structure for debugging
    console.log("College fees structure:", selectedCollege.feesByIncome);

    if (
      selectedCollege.feesByIncome &&
      typeof selectedCollege.feesByIncome === "object"
    ) {
      adjustedPrice = selectedCollege.feesByIncome[incomeBracket] || 0;
      console.log(
        `Using fee for income bracket ${incomeBracket}:`,
        adjustedPrice
      );
    } else {
      // If no fee structure, use the full tuition + room and board as base price
      adjustedPrice =
        selectedCollege.tuition + (selectedCollege.roomAndBoard || 0);
      console.log("No fee structure found, using full cost:", adjustedPrice);
    }

    // For public colleges, apply out-of-state tuition adjustment if needed
    if (
      selectedCollege.type &&
      selectedCollege.type.includes("Public") &&
      !isInState
    ) {
      // Public universities typically charge 2-3x for out-of-state students
      const inStateTuition = selectedCollege.tuition || 0;
      const outOfStateMultiplier = 3;
      const outOfStateSurcharge =
        inStateTuition * outOfStateMultiplier - inStateTuition;

      // Add this surcharge to the net price
      adjustedPrice += outOfStateSurcharge;
      console.log(
        "Applied out-of-state tuition adjustment:",
        outOfStateSurcharge
      );
    }

    // Apply housing adjustment for off-campus housing
    if (!onCampusHousing && selectedCollege.roomAndBoard) {
      // Off-campus housing might be 10% cheaper or more expensive depending on the area
      adjustedPrice = adjustedPrice - selectedCollege.roomAndBoard * 0.1;
      console.log("Applied off-campus housing adjustment");
    }

    // If we still have 0 at this point, use tuition as fallback
    if (adjustedPrice === 0 && selectedCollege.tuition) {
      adjustedPrice = selectedCollege.tuition;
      console.log("Using tuition as fallback:", adjustedPrice);
    }

    const result = Math.max(0, Math.round(adjustedPrice)); // Ensure we don't return negative values
    console.log("Final net price calculation result:", result);
    return result;
  };

  // Ensure netPrice is always a number, not null
  const netPrice = calculated ? calculateNetPrice() : 0;

  // Helper function to calculate average fees
  const calculateAverageFees = (feesByIncome: any): number => {
    if (!feesByIncome) return 0;

    try {
      const fees = Object.values(feesByIncome) as number[];
      if (fees.length === 0) return 0;

      const sum = fees.reduce((total, fee) => total + (fee || 0), 0);
      return sum / fees.length;
    } catch (err) {
      console.error("Error calculating average fees", err);
      return 0;
    }
  };

  // State to manage payment adjustment percentages
  const [efcPercentage, setEfcPercentage] = useState<number>(40); // User can pay 0-100% of net price
  const [workStudyPercentage, setWorkStudyPercentage] = useState<number>(30); // Work-study covers 0-100% of remainder

  // Enforce that EFC + work-study <= 100%
  useEffect(() => {
    // If the combined percentage exceeds 100%, adjust work-study down
    if (efcPercentage + workStudyPercentage > 100) {
      setWorkStudyPercentage(100 - efcPercentage);
    }
  }, [efcPercentage, workStudyPercentage]);

  // Calculate the base EFC amount (without user adjustment)
  const calculateBaseEFC = (): number => {
    if (!householdIncome || !netPrice) return 0;

    const income = parseInt(householdIncome, 10) || 0;
    const investments = parseInt(investmentAssets, 10) || 0;
    const homeEquity =
      homeOwnership === "own" ? (parseInt(homeValue, 10) || 0) * 0.05 : 0;

    // Simplified EFC calculation - in reality this is much more complex
    let baseEfc = income * 0.12; // 12% of income
    baseEfc += investments * 0.07; // 7% of investment assets
    baseEfc += homeEquity; // Small percentage of home equity

    // Limit to no more than netPrice
    return Math.min(Math.round(baseEfc), netPrice);
  };

  // Calculate expected family contribution (EFC) with user's slider adjustment
  const calculateEFC = (): number => {
    if (!netPrice) return 0;

    // User can adjust how much of net price they want to pay (0-100%)
    const adjustedEfc = netPrice * (efcPercentage / 100);

    return Math.round(adjustedEfc);
  };

  // Calculate work-study amount with user's slider adjustment
  const calculateWorkStudy = (): number => {
    if (!netPrice) return 0;

    // Work-study is also based on total net price, not just the remainder
    const maxWorkStudyPercentage = 100 - efcPercentage; // Can't exceed what's left after EFC
    const actualWorkStudyPercentage = Math.min(
      workStudyPercentage,
      maxWorkStudyPercentage
    );

    // Apply work-study percentage to the total net price
    return Math.round(netPrice * (actualWorkStudyPercentage / 100));
  };

  // Calculate student loan amount (the rest is covered by loans)
  const calculateStudentLoan = (): number => {
    if (!netPrice) return 0;

    const efc = calculateEFC();
    const workStudy = calculateWorkStudy();

    // Loans cover what's left after EFC and work-study
    return Math.round(Math.max(0, netPrice - efc - workStudy));
  };

  // Helper function to calculate remaining years
  const calculateRemainingYears = () => {
    if (isTransferStudent) {
      return yearsCompleted; // yearsCompleted now represents years TO completion
    }
    // For non-transfer students, use default program length
    return selectedCollege?.type.toLowerCase().includes("community") ? 2 : 4;
  };

  const handleCalculate = () => {
    // If we have a zip code but no income data, try to fetch it automatically
    if (zipCode && zipCode.length === 5 && !estimatedIncome) {
      // Fetch income data first, then set calculated to true
      setFetchingZipCode(true);

      fetch(`/api/zip-code-income/zip/${zipCode}`)
        .then((response) => {
          if (!response.ok) {
            throw new Error("Zip code data not found");
          }
          return response.json();
        })
        .then((data) => {
          console.log(
            "üìç Auto-fetched zip code data during calculation:",
            data
          );

          // Store complete zip code data
          setLocalZipCodeData(data);

          // Set income data
          setEstimatedIncome(data.mean_income);
          setUsingEstimatedIncome(true);
          setHouseholdIncome(data.mean_income.toString());

          // Set investment assets data
          if (data.estimated_investments) {
            setEstimatedInvestments(data.estimated_investments);
            setUsingEstimatedInvestments(true);
            setInvestmentAssets(data.estimated_investments.toString());
          }

          // Set home value data if available
          if (data.home_value) {
            setEstimatedHomeValue(data.home_value);
            setUsingEstimatedHomeValue(true);
            setHomeValue(data.home_value.toString());
          }

          // Set the user's state code for in-state tuition determination
          if (data.state) {
            console.log(
              `üìç Setting user state to: "${data.state}" from zip code ${zipCode}`
            );
            setUserState(data.state);
          }

          // Now continue with the calculation
          setCalculated(true);
        })
        .catch((err) => {
          console.error(
            "Error fetching zip code income during calculation:",
            err
          );
          // Even if the data fetch failed, we'll still calculate with current values
          setCalculated(true);
        })
        .finally(() => {
          setFetchingZipCode(false);
        });
    } else {
      // If we already have income data or no zip code, just calculate
      setCalculated(true);
    }
  };

  // Mutation for saving calculations
  const { mutate: saveCalculation, isPending: isSaving } = useMutation({
    mutationFn: async (calculationData: CollegeCalculation) => {
      const response = await fetch("/api/college-calculations", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(calculationData),
      });

      if (!response.ok) {
        throw new Error("Failed to save calculation");
      }

      return response.json();
    },
    onSuccess: (data) => {
      toast({
        title: "Calculation Saved",
        description:
          "Your college cost calculation has been saved to your profile.",
      });

      // Invalidate relevant queries to ensure the saved calculation appears immediately
      queryClient.invalidateQueries({
        queryKey: ["/api/college-calculations/user", userId],
      });
      // Also invalidate the colleges query used in SavedCalculationsSection
      queryClient.invalidateQueries({ queryKey: ["/api/colleges"] });
    },
    onError: (error) => {
      console.error("Error saving calculation:", error);
      toast({
        variant: "destructive",
        title: "Save Failed",
        description: "We couldn't save your calculation. Please try again.",
      });
    },
  });

  // Function to save calculation to user profile
  const saveToProfile = () => {
    // Check if user is logged in
    if (!userId) {
      toast({
        variant: "destructive",
        title: "Authentication Required",
        description: "Please log in to save your calculation to your profile.",
      });
      return;
    }

    if (!selectedCollege || !netPrice) {
      toast({
        variant: "destructive",
        title: "Unable to Save",
        description: "Please complete your calculation first.",
      });
      return;
    }

    // Set default calculation name and open dialog
    setCalculationName(
      `${selectedCollege.name} (${new Date().toLocaleDateString()})`
    );
    setShowSaveDialog(true);
  };

  // Function that actually saves the calculation after name is provided
  const handleSaveCalculation = () => {
    if (!userId || !selectedCollege || !netPrice) return;

    // Calculate financial aid amount based on sticker price minus net price
    const stickerPrice =
      selectedCollege.type.includes("Public") && !isInState
        ? selectedCollege.tuition * 3 + selectedCollege.roomAndBoard
        : selectedCollege.tuition + selectedCollege.roomAndBoard;

    const financialAid = Math.max(0, stickerPrice - netPrice);

    // Get the multiplier based on remaining years
    const programMultiplier = calculateRemainingYears();

    // Create the calculation data object - always save total remaining program costs
    const calculationData: CollegeCalculation = {
      userId: userId as number,
      collegeId: selectedCollege.id,
      netPrice: netPrice * programMultiplier,
      inState: isInState,
      familyContribution: calculateEFC() * programMultiplier,
      workStudy: calculateWorkStudy() * programMultiplier,
      studentLoanAmount: calculateStudentLoan() * programMultiplier,
      financialAid: financialAid * programMultiplier,
      householdIncome: parseInt(householdIncome, 10) || 0,
      householdSize: parseInt(householdSize, 10) || 0,
      zip: zipCode,
      tuitionUsed:
        selectedCollege.tuition *
        (selectedCollege.type.includes("Public") && !isInState ? 3 : 1),
      roomAndBoardUsed: selectedCollege.roomAndBoard,
      onCampusHousing,
      totalCost: stickerPrice * programMultiplier,
      notes: `${calculationName || selectedCollege.name} - ${
        isTransferStudent
          ? `${yearsCompleted} Year Program (Transfer Student)`
          : `${selectedCollege.type.toLowerCase().includes("community") ? "2" : "4"} Year Total Cost`
      }`,
      includedInProjection: false,
    };

    // Close the dialog
    setShowSaveDialog(false);

    // Save the calculation
    saveCalculation(calculationData);
  };

  return (
    <div className="max-w-7xl mx-auto">
      <h1 className="text-2xl font-display font-semibold text-gray-800 mb-2">
        Net Price Calculator
      </h1>
      <p className="text-gray-600 mb-6">
        Find out how much a college will cost after financial aid by entering
        your information below.
      </p>

      {/* Guest Mode Banner */}
      {renderGuestModeBanner()}

      {/* New Alert - Automatic Financial Information Estimation (matching design from image) */}
      {zipCodeData && zipCodeData.mean_income ? (
        <div className="bg-white border border-gray-200 rounded-lg p-5 mb-6 shadow-sm">
          <div className="flex items-start">
            <div className="mr-3 flex-shrink-0 mt-0.5">
              <DollarSign className="h-5 w-5 text-primary" />
            </div>
            <div>
              <h3 className="font-medium text-gray-900">
                Automatic Income Estimation
              </h3>
              <p className="text-sm text-gray-600 mt-1">
                We've automatically used the zip code from your profile (
                {zipCode}) to estimate your household income based on your
                area's average. You can always adjust this estimate if needed.
              </p>
              <div className="mt-2 space-y-1">
                <p className="text-sm text-gray-700">
                  <span className="font-medium">Estimated income:</span> $
                  {safeNumberFormat(zipCodeData.mean_income)}
                </p>
                {zipCodeData.estimated_investments && (
                  <p className="text-sm text-gray-700">
                    <span className="font-medium">Estimated investments:</span>{" "}
                    ${safeNumberFormat(zipCodeData.estimated_investments)}
                  </p>
                )}
                {zipCodeData.home_value && (
                  <p className="text-sm text-gray-700">
                    <span className="font-medium">Estimated home value:</span> $
                    {safeNumberFormat(zipCodeData.home_value)}
                  </p>
                )}
              </div>
            </div>
          </div>
        </div>
      ) : null}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="md:col-span-1">
          <Card>
            <CardContent className="pt-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium">Your Information</h3>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                  className="h-8 px-2 text-gray-500 hover:text-gray-700"
                >
                  {showAdvancedOptions ? (
                    <div className="flex items-center">
                      <span className="text-xs mr-1">Less Options</span>
                      <ChevronUp className="h-4 w-4" />
                    </div>
                  ) : (
                    <div className="flex items-center">
                      <span className="text-xs mr-1">More Options</span>
                      <ChevronDown className="h-4 w-4" />
                    </div>
                  )}
                </Button>
              </div>

              <div className="space-y-4">
                <div>
                  <Label htmlFor="zipCode" className="flex justify-between">
                    <span>Your Zip Code</span>
                    {userData && userData.zipCode && !showZipCodeEditor && (
                      <span className="text-xs text-muted-foreground flex items-center">
                        <Check className="h-3 w-3 mr-1" /> From your profile
                      </span>
                    )}
                  </Label>

                  {!showZipCodeEditor && userData && userData.zipCode ? (
                    <div className="flex mt-1 items-center">
                      <div className="border rounded-md px-3 py-2 flex-1 bg-muted text-muted-foreground">
                        {zipCode}
                        {localZipCodeData && (
                          <span className="text-xs ml-2 text-muted-foreground">
                            ({localZipCodeData.state})
                          </span>
                        )}
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="ml-2"
                        onClick={() => setShowZipCodeEditor(true)}
                      >
                        Change
                      </Button>
                    </div>
                  ) : (
                    <div className="flex mt-1">
                      <Input
                        id="zipCode"
                        placeholder="Try 90210, 02142, 30328..."
                        value={zipCode}
                        onChange={(e) => setZipCode(e.target.value)}
                        className="flex-1"
                      />
                      <Button
                        variant="outline"
                        className="ml-2"
                        onClick={() => {
                          fetchIncomeData(zipCode);
                          if (
                            userData &&
                            userData.zipCode &&
                            zipCode !== userData.zipCode
                          ) {
                            setShowZipCodeEditor(false);
                          }
                        }}
                        disabled={zipCode.length !== 5 || fetchingZipCode}
                      >
                        {fetchingZipCode ? (
                          <Loader2 className="h-4 w-4 animate-spin" />
                        ) : (
                          "Find"
                        )}
                      </Button>
                      {userData && userData.zipCode && showZipCodeEditor && (
                        <Button
                          variant="ghost"
                          size="sm"
                          className="ml-2"
                          onClick={() => {
                            setZipCode(userData.zipCode);
                            setShowZipCodeEditor(false);
                            if (userData.zipCode.length === 5) {
                              fetchIncomeData(userData.zipCode);
                            }
                          }}
                        >
                          Reset
                        </Button>
                      )}
                    </div>
                  )}
                  {zipCode.length > 0 && zipCode.length < 5 && (
                    <p className="text-xs text-destructive mt-1">
                      Please enter a valid 5-digit zip code
                    </p>
                  )}
                  {zipCode.length === 0 && (
                    <p className="text-xs text-gray-500 mt-1">
                      Try 90210 (Beverly Hills), 02142 (Cambridge), 94103 (San
                      Francisco), or 30328 (Atlanta) for example data.
                    </p>
                  )}
                  {isLoadingUser && (
                    <p className="text-xs text-muted-foreground mt-1 flex items-center">
                      <Loader2 className="h-3 w-3 mr-1 animate-spin" /> Loading
                      your profile data...
                    </p>
                  )}
                </div>

                <div>
                  <Label htmlFor="income" className="flex justify-between">
                    <span>Annual Household Income</span>
                    {estimatedIncome !== null && (
                      <span className="text-xs text-muted-foreground">
                        {usingEstimatedIncome ? (
                          <span className="flex items-center text-primary">
                            <Check className="h-3 w-3 mr-1" /> Using zip code
                            estimate
                          </span>
                        ) : (
                          <Button
                            variant="link"
                            className="p-0 h-auto text-xs"
                            onClick={() => {
                              setHouseholdIncome(estimatedIncome.toString());
                              setUsingEstimatedIncome(true);
                            }}
                          >
                            Use zip code estimate ($
                            {safeNumberFormat(estimatedIncome)})
                          </Button>
                        )}
                      </span>
                    )}
                  </Label>
                  <div className="flex items-center mt-1">
                    <span className="mr-2">$</span>
                    <Input
                      id="income"
                      placeholder={
                        estimatedIncome
                          ? estimatedIncome.toString()
                          : "e.g. 75000"
                      }
                      value={householdIncome}
                      onChange={(e) => {
                        setHouseholdIncome(e.target.value);
                        if (usingEstimatedIncome) {
                          setUsingEstimatedIncome(false);
                        }
                      }}
                    />
                  </div>
                  {estimatedIncome !== null && usingEstimatedIncome && (
                    <p className="text-xs text-muted-foreground mt-1">
                      This is the average income for your zip code. You can
                      adjust it if needed.
                    </p>
                  )}
                </div>

                {/* Essential field - Household Size */}
                <div>
                  <Label htmlFor="householdSize">Household Size</Label>
                  <Select
                    value={householdSize}
                    onValueChange={setHouseholdSize}
                  >
                    <SelectTrigger className="mt-1">
                      <SelectValue placeholder="Select household size" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">1 person</SelectItem>
                      <SelectItem value="2">2 people</SelectItem>
                      <SelectItem value="3">3 people</SelectItem>
                      <SelectItem value="4">4 people</SelectItem>
                      <SelectItem value="5">5 people</SelectItem>
                      <SelectItem value="6+">6+ people</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                {/* Show advanced fields toggle button */}
                <div className="pt-2">
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    className="w-full flex justify-between items-center"
                    onClick={() => setShowAdvancedOptions(!showAdvancedOptions)}
                  >
                    <span>
                      Advanced Details {showAdvancedOptions ? "‚Üë" : "‚Üì"}
                    </span>
                    {showAdvancedOptions ? (
                      <ChevronUp className="h-4 w-4 ml-2" />
                    ) : (
                      <ChevronDown className="h-4 w-4 ml-2" />
                    )}
                  </Button>
                </div>

                {/* The rest of the component UI */}
                {/* Add a calculate button */}
                <Button
                  className="w-full mt-4"
                  disabled={!zipCode || !householdIncome}
                  onClick={handleCalculate}
                >
                  Calculate
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Right column for calculation results */}
        <div className="md:col-span-2">
          {calculated ? (
            <Card>
              <CardContent className="p-6">
                <h3 className="text-lg font-medium mb-4">
                  Estimated Net Price
                </h3>

                {netPrice !== null && selectedCollege ? (
                  <div className="bg-primary/10 p-4 rounded-lg text-center mb-4">
                    <p className="text-lg text-muted-foreground">
                      Estimated annual cost after financial aid:
                    </p>
                    <p className="text-3xl font-bold text-primary mt-2">
                      ${safeNumberFormat(netPrice)}
                    </p>
                  </div>
                ) : (
                  <div className="text-center p-8 text-muted-foreground">
                    <p>
                      Select a college and complete the form to calculate your
                      estimated net price.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent className="p-6 text-center">
                <h3 className="text-lg font-medium mb-4">
                  Net Price Calculator
                </h3>
                <p className="text-muted-foreground mb-6">
                  Enter your information and select a college to calculate your
                  estimated net price.
                </p>
                <div className="bg-muted p-8 rounded-lg">
                  <p className="font-medium">How this calculator works:</p>
                  <ol className="list-decimal text-left pl-5 mt-2 space-y-2">
                    <li>
                      Enter your zip code to get estimated financial information
                    </li>
                    <li>Choose a college from your favorites list</li>
                    <li>
                      The calculator will estimate your net price based on your
                      financial information
                    </li>
                  </ol>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      </div>
    </div>
  );
};

export default NetPriceCalculator;
