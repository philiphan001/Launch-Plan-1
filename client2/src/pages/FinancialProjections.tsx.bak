import { useState, useEffect, useRef, useMemo } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { createMainProjectionChart } from "@/lib/charts";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Slider } from "@/components/ui/slider";
import { Label } from "@/components/ui/label";
import { Info, School, Briefcase, GraduationCap } from "lucide-react";
import { 
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { formatCurrency } from "@/lib/utils";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Skeleton } from "@/components/ui/skeleton";
import MilestonesSection from "@/components/milestones/MilestonesSection";
import { AdvicePanel } from "@/components/financial-advice/AdvicePanel";
import { generateFinancialAdvice, FinancialAdvice, FinancialState } from "@/lib/financialAdvice";

type ProjectionType = "netWorth" | "income" | "expenses" | "assets" | "liabilities";

// Interfaces for API responses
interface User {
  id: number;
  firstName: string | null;
  lastName: string | null;
  email: string | null;
  location: string | null;
  zipCode: string | null;
  birthYear: number | null;
}

interface CollegeCalculation {
  id: number;
  userId: number;
  collegeId: number;
  netPrice: number;
  studentLoanAmount: number;
  includedInProjection: boolean;
  college?: {
    name: string;
  };
}

interface CareerCalculation {
  id: number;
  userId: number;
  careerId: number;
  projectedSalary: number;
  entryLevelSalary: number | null;
  startYear: number | null;
  includedInProjection: boolean;
  education: string | null;
  career?: {
    title: string;
  };
}

interface Milestone {
  id: number;
  userId: number;
  type: string;
  title: string;
  date: string;
  yearsAway: number;
  // Marriage specific fields
  spouseOccupation?: string;
  spouseIncome?: number;
  spouseAssets?: number;
  spouseLiabilities?: number;
  // Home specific fields
  homeValue?: number;
  homeDownPayment?: number;
  homeMonthlyPayment?: number;
  // Car specific fields
  carValue?: number;
  carDownPayment?: number;
  carMonthlyPayment?: number;
  // Children specific fields
  childrenCount?: number;
  childrenExpensePerYear?: number;
  // Education specific fields
  educationCost?: number;
}

interface FinancialProfile {
  id: number;
  userId: number;
  householdIncome: number | null;
  householdSize: number | null;
  savingsAmount: number | null;
  studentLoanAmount: number | null;
  otherDebtAmount: number | null;
}

const FinancialProjections = () => {
  // Temporary user ID for demo purposes
  const userId = 1;

  const [activeTab, setActiveTab] = useState<ProjectionType>("netWorth");
  const [timeframe, setTimeframe] = useState<string>("10 Years");
  const [age, setAge] = useState<number>(25);
  const [startingSavings, setStartingSavings] = useState<number>(5000);
  const [income, setIncome] = useState<number>(40000);
  const [expenses, setExpenses] = useState<number>(35000);
  const [incomeGrowth, setIncomeGrowth] = useState<number>(3);
  const [studentLoanDebt, setStudentLoanDebt] = useState<number>(0);
  const [financialAdvice, setFinancialAdvice] = useState<FinancialAdvice[]>([]);
  
  const chartRef = useRef<HTMLCanvasElement>(null);
  const chartInstance = useRef<any>(null);
  
  // Get the query client for invalidating queries
  const queryClient = useQueryClient();

  // Fetch user data to get birth year
  const { data: userData, isLoading: isLoadingUser } = useQuery({
    queryKey: ['/api/users', userId],
    queryFn: async () => {
      const response = await fetch(`/api/users/${userId}`);
      if (!response.ok) throw new Error('Failed to fetch user data');
      return response.json() as Promise<User>;
    }
  });

  // Fetch assumptions for financial calculations
  const { data: assumptions, isLoading: isLoadingAssumptions } = useQuery({
    queryKey: ['/api/assumptions/user', userId],
    queryFn: async () => {
      try {
        const response = await fetch(`/api/assumptions/user/${userId}`);
        if (!response.ok) {
          console.error("Failed to fetch assumptions:", response.statusText);
          return []; // Return empty array if fetch fails
        }
        return response.json();
      } catch (err) {
        console.error("Error fetching assumptions:", err);
        return []; // Return empty array on error
      }
    }
  });
  
  // Fetch financial profile
  const { data: financialProfile, isLoading: isLoadingFinancialProfile, error: financialProfileError } = useQuery({
    queryKey: ['/api/financial-profiles/user', userId],
    queryFn: async () => {
      const response = await fetch(`/api/financial-profiles/user/${userId}`);
      if (response.status === 404) {
        // Return a default financial profile if none exists
        return {
          id: 0,
          userId: userId,
          householdIncome: null,
          householdSize: null,
          savingsAmount: 5000, // Default starting savings
          studentLoanAmount: null,
          otherDebtAmount: null
        } as FinancialProfile;
      }
      if (!response.ok) throw new Error('Failed to fetch financial profile');
      return response.json() as Promise<FinancialProfile>;
    },
    enabled: !!userData
  });
  
  // Fetch location cost of living data based on user's zip code
  const { data: locationCostData, isLoading: isLoadingLocationData } = useQuery({
    queryKey: ['/api/location-cost-of-living/zip', userData?.zipCode],
    queryFn: async () => {
      if (!userData?.zipCode) return null;
      const response = await fetch(`/api/location-cost-of-living/zip/${userData.zipCode}`);
      if (response.status === 404) return null;
      if (!response.ok) throw new Error('Failed to fetch location cost of living data');
      return response.json();
    },
    enabled: !!userData?.zipCode
  });

  // Fetch college calculations to get student loan debt
  const { data: collegeCalculations, isLoading: isLoadingCollegeCalcs } = useQuery({
    queryKey: ['/api/college-calculations/user', userId],
    queryFn: async () => {
      const response = await fetch(`/api/college-calculations/user/${userId}`);
      if (!response.ok) throw new Error('Failed to fetch college calculations');
      return response.json() as Promise<CollegeCalculation[]>;
    }
  });

  // Fetch career calculations to get income projection
  const { data: careerCalculations, isLoading: isLoadingCareerCalcs } = useQuery({
    queryKey: ['/api/career-calculations/user', userId],
    queryFn: async () => {
      const response = await fetch(`/api/career-calculations/user/${userId}`);
      if (!response.ok) throw new Error('Failed to fetch career calculations');
      return response.json() as Promise<CareerCalculation[]>;
    }
  });
  
  // Fetch milestones for financial projections
  const { data: milestones, isLoading: isLoadingMilestones } = useQuery({
    queryKey: ['/api/milestones/user', userId],
    queryFn: async () => {
      const response = await fetch(`/api/milestones/user/${userId}`);
      if (!response.ok) throw new Error('Failed to fetch milestones');
      return response.json() as Promise<Milestone[]>;
    }
  });
  
  // Update form values based on user profile and saved calculations
  useEffect(() => {
    // Calculate current age from birth year if available
    if (userData?.birthYear) {
      const currentAge = new Date().getFullYear() - userData.birthYear;
      setAge(currentAge);
    }
    
    // Set initial savings from financial profile
    if (financialProfile?.savingsAmount) {
      setStartingSavings(financialProfile.savingsAmount);
    }
    
    // Set student loan debt from college calculations
    if (collegeCalculations && collegeCalculations.length > 0) {
      // Find the college calculation that's included in projections
      const includedCollegeCalc = collegeCalculations.find(calc => calc.includedInProjection);
      if (includedCollegeCalc) {
        setStudentLoanDebt(includedCollegeCalc.studentLoanAmount || 0);
      }
    }
    
    // Set income from career calculations
    if (careerCalculations && careerCalculations.length > 0) {
      // Find the career calculation that's included in projections
      const includedCareerCalc = careerCalculations.find(calc => calc.includedInProjection);
      if (includedCareerCalc && includedCareerCalc.entryLevelSalary) {
        setIncome(includedCareerCalc.entryLevelSalary);
      } else if (includedCareerCalc) {
        setIncome(includedCareerCalc.projectedSalary);
      }
    }

    // Set appropriate defaults for expenses based on income and location
    if (income > 0) {
      // Base expenses on income (typically 70-80% of income)
      const baseExpenses = income * 0.75;
      
      // Apply location adjustment if available
      if (locationCostData) {
        // Calculate annual expenses directly from monthly cost of living data
        // These values are actual dollar amounts from the CSV file
        const monthlyExpenses = (
          (locationCostData.housing || 0) +
          (locationCostData.food || 0) +
          (locationCostData.transportation || 0) +
          (locationCostData.healthcare || 0) +
          (locationCostData.personal_insurance || 0) + 
          (locationCostData.entertainment || 0) +
          (locationCostData.services || 0) +
          (locationCostData.apparel || 0) +
          (locationCostData.other || 0)
        );
        
        // Convert monthly to annual
        const annualExpenses = monthlyExpenses * 12;
        
        // Make sure we're getting a reasonable result
        console.log("Monthly expenses from location data:", monthlyExpenses);
        console.log("Annual expenses from location data:", annualExpenses);
        
        // Use the calculated annual expenses, but ensure it's at least 50% of income
        // as a sanity check (people generally don't spend less than half their income)
        setExpenses(Math.max(Math.round(annualExpenses), Math.round(income * 0.5)));
      } else {
        setExpenses(Math.round(baseExpenses));
      }
    }
  }, [userData, financialProfile, collegeCalculations, careerCalculations, locationCostData, income]);
  
  // Find the included college and career calculations
  const includedCollegeCalc = collegeCalculations?.find(calc => calc.includedInProjection);
  const includedCareerCalc = careerCalculations?.find(calc => calc.includedInProjection);
  
  // Define variables to hold spouse-related assumption values with defaults
  const [spouseLoanTerm, setSpouseLoanTerm] = useState<number>(10); // Default: 10 years
  const [spouseLoanRate, setSpouseLoanRate] = useState<number>(5.0); // Default: 5.0% annual interest
  const [spouseAssetGrowth, setSpouseAssetGrowth] = useState<number>(3.0); // Default: 3.0% annual growth
  
  // Process assumptions for financial calculations
  useEffect(() => {
    if (assumptions && assumptions.length > 0) {
      console.log("Processing assumptions for financial calculations:", assumptions);
      
      // Find spouse loan term assumption
      const spouseLoanTermAssumption = assumptions.find(
        (a: { category: string; key: string; isEnabled: boolean }) => 
          a.category === "marriage" && a.key === "spouse-loan-term" && a.isEnabled
      );
      
      // Find spouse loan interest rate assumption
      const spouseLoanRateAssumption = assumptions.find(
        (a: { category: string; key: string; isEnabled: boolean }) => 
          a.category === "marriage" && a.key === "spouse-loan-rate" && a.isEnabled
      );
      
      // Find spouse asset growth rate assumption
      const spouseAssetGrowthAssumption = assumptions.find(
        (a: { category: string; key: string; isEnabled: boolean }) => 
          a.category === "marriage" && a.key === "spouse-asset-growth" && a.isEnabled
      );
      
      console.log("Spouse loan term assumption:", spouseLoanTermAssumption);
      console.log("Spouse loan rate assumption:", spouseLoanRateAssumption);
      console.log("Spouse asset growth assumption:", spouseAssetGrowthAssumption);
      
      // Set state variables with assumption values or use defaults
      if (spouseLoanTermAssumption) {
        console.log("Setting spouse loan term to:", spouseLoanTermAssumption.value);
        setSpouseLoanTerm(spouseLoanTermAssumption.value);
      }
      
      if (spouseLoanRateAssumption) {
        console.log("Setting spouse loan rate to:", spouseLoanRateAssumption.value);
        setSpouseLoanRate(spouseLoanRateAssumption.value);
      }
      
      if (spouseAssetGrowthAssumption) {
        console.log("Setting spouse asset growth to:", spouseAssetGrowthAssumption.value);
        setSpouseAssetGrowth(spouseAssetGrowthAssumption.value);
      }
    }
  }, [assumptions]);
  
  // Check if data is being loaded
  const isLoading = isLoadingUser || isLoadingFinancialProfile || isLoadingCollegeCalcs || isLoadingCareerCalcs || isLoadingLocationData || isLoadingMilestones || isLoadingAssumptions;
  
  // Determine years based on timeframe
  const years = timeframe === "5 Years" ? 5 : timeframe === "20 Years" ? 20 : 10;
  
  // Get cost of living adjustment factor if available
  const costOfLivingFactor = locationCostData?.income_adjustment_factor || 1.0;
  
  // Generate projection data based on inputs
  // This is now a function to be called both during rendering and via onMilestoneChange
  // We directly use the state values and the milestones parameter 
  const generateProjectionData = (milestonesList = milestones) => {
    // Calculate initial net worth (just savings, student loans tracked separately as liabilities)
    let netWorth = startingSavings;
    
    // Properly adjust income based on cost of living - correctly apply the factor
    let currentIncome = income * costOfLivingFactor;
    
    // Use the expenses input as-is because we already adjusted it in the useEffect
    // We don't need to apply location adjustment again since it's already built into the input value
    let currentExpenses = expenses;
    
    // Ensure expenses are at least 50% of income and at most 90% as a sanity check
    currentExpenses = Math.max(currentIncome * 0.5, Math.min(currentExpenses, currentIncome * 0.9));
    
    const netWorthData = [netWorth];
    const incomeData = [currentIncome];
    const spouseIncomeData = [0]; // Initialize spouse income data array
    const expensesData = [currentExpenses];
    const ages = [age];
    
    // Initialize separate arrays for assets and liabilities
    const assetsData = [startingSavings]; // Initial assets (savings only)
    const liabilitiesData = [studentLoanDebt]; // Initial liabilities (student loan only)
    
    // Track different types of expenses with separate arrays for detailed breakdown
    // Track expense categories for detailed breakdown with initial values as percentages of base expenses
    const housingExpensesData = [currentExpenses * 0.3]; // Mortgage/rent expenses - estimate 30%
    const transportationExpensesData = [currentExpenses * 0.15]; // Transportation expenses - estimate 15%
    const foodExpensesData = [currentExpenses * 0.15]; // Food expenses - estimate 15%
    const healthcareExpensesData = [currentExpenses * 0.1]; // Healthcare expenses - estimate 10%
    const educationExpensesData = [0]; // Student loan and education loan expenses
    const debtExpensesData = [0]; // Other debt payments
    const discretionaryExpensesData = [currentExpenses * 0.3]; // Discretionary spending - remaining 30%
    const childcareExpensesData = [0]; // Child-related expenses
    const livingExpensesData = [currentExpenses]; // Total base living expenses
    
    // Specific asset and liability tracking
    const homeValueData = [0]; // Track home value as an asset
    const mortgageData = [0];  // Track mortgage as a liability
    
    // Track car value and loan
    const carValueData = [0]; // Track car value as an asset
    const carLoanData = [0];  // Track car loan as a liability
    
    // Track student loan balance over time
    let remainingStudentLoanDebt = studentLoanDebt;
    const studentLoanData = [remainingStudentLoanDebt]; // Track student loans as a liability
    
    // Sort milestones by yearsAway to process them in chronological order
    const sortedMilestones = milestones ? [...milestones].sort((a, b) => a.yearsAway - b.yearsAway) : [];
    
    console.log("Processing milestones for projection:", sortedMilestones);
    
    // Create a map of milestones by year
    const milestonesByYear = new Map();
    if (sortedMilestones.length > 0) {
      sortedMilestones.forEach(milestone => {
        if (milestone.yearsAway <= years) {
          milestonesByYear.set(milestone.yearsAway, [...(milestonesByYear.get(milestone.yearsAway) || []), milestone]);
        }
      });
    }
    
    // Track spouse income and assets/liabilities (for marriage milestone)
    let hasSpouse = false;
    let spouseIncome = 0;
    let spouseIncomeGrowth = incomeGrowth; // Use same growth rate as primary income
    let spouseAssets = 0; // Track spouse assets separately
    let spouseLiabilities = 0; // Track spouse liabilities separately
    
    // Track homeowner status, value, and mortgage (for home milestone)
    let hasHome = false;
    let homeValue = 0;
    let mortgagePrincipal = 0;
    let mortgagePayment = 0;
    
    // Track car payments (for car milestone)
    let hasCar = false;
    let carValue = 0;
    let carLoanPrincipal = 0;
    let carPayment = 0;
    
    // Track children expenses (for children milestone)
    let hasChildren = false;
    let childrenExpenses = 0;
    
    // Track education debt (for education milestone)
    let hasEducationDebt = false;
    let educationDebt = 0;
    
    for (let i = 1; i <= years; i++) {
      // Apply income growth
      currentIncome = Math.round(currentIncome * (1 + incomeGrowth / 100));
      
      // If spouse income, apply growth to that as well
      if (hasSpouse) {
        spouseIncome = Math.round(spouseIncome * (1 + spouseIncomeGrowth / 100));
      }
      
      // Base expense growth rate (inflation)
      currentExpenses = Math.round(currentExpenses * 1.02);
      
      // Process milestones for this year
      if (milestonesByYear.has(i)) {
        const yearMilestones = milestonesByYear.get(i);
        
        yearMilestones.forEach((milestone: any) => {
          console.log(`Processing milestone for year ${i}:`, milestone);
          
          switch (milestone.type) {
            case 'marriage':
              hasSpouse = true;
              spouseIncome = milestone.spouseIncome || 50000;
              
              // Set spouse assets and liabilities
              spouseAssets = milestone.spouseAssets || 0;
              spouseLiabilities = milestone.spouseLiabilities || 0;
              
              // Add spouse assets and subtract liabilities from net worth
              netWorth += spouseAssets - spouseLiabilities;
              console.log(`Marriage milestone: Adding spouse with income $${spouseIncome}, assets $${spouseAssets}, and liabilities $${spouseLiabilities}`);
              break;
              
            case 'home':
              hasHome = true;
              // Set home value
              homeValue = milestone.homeValue || 0;
              // Calculate mortgage principal (home value minus down payment)
              const downPayment = milestone.homeDownPayment || 0;
              mortgagePrincipal = homeValue - downPayment;
              // Down payment reduces liquid assets but doesn't change net worth directly
              // since it transfers from cash to home equity
              // Set monthly mortgage payment (annual)
              mortgagePayment = (milestone.homeMonthlyPayment || 0) * 12;
              console.log(`Home milestone: Value $${homeValue}, Down payment $${downPayment}, Mortgage $${mortgagePrincipal}, annual payment $${mortgagePayment}`);
              break;
              
            case 'car':
              hasCar = true;
              // Set car value
              carValue = milestone.carValue || 0;
              // Calculate car loan principal (car value minus down payment)
              const carDownPayment = milestone.carDownPayment || 0;
              carLoanPrincipal = carValue - carDownPayment;
              // Down payment reduces liquid assets but doesn't change net worth directly
              // since it transfers from cash to car asset
              // Set monthly car payment (annual)
              carPayment = (milestone.carMonthlyPayment || 0) * 12;
              console.log(`Car milestone: Value $${carValue}, Down payment $${carDownPayment}, Loan $${carLoanPrincipal}, annual payment $${carPayment}`);
              break;
              
            case 'children':
              hasChildren = true;
              // Set annual child expenses
              childrenExpenses = (milestone.childrenExpensePerYear || 0) * (milestone.childrenCount || 1);
              console.log(`Children milestone: ${milestone.childrenCount} children, annual expenses $${childrenExpenses}`);
              break;
              
            case 'education':
              hasEducationDebt = true;
              // Add education cost as debt
              educationDebt = milestone.educationCost || 0;
              netWorth -= educationDebt / 5; // Assume 20% down payment or first year costs
              console.log(`Education milestone: Total cost $${educationDebt}`);
              break;
          }
        });
      }
      
      // Track personal and spouse income separately
      const totalIncome = currentIncome + (hasSpouse ? spouseIncome : 0);
      
      // Add milestone-related expenses
      const totalExpenses = currentExpenses + 
        (hasHome ? mortgagePayment : 0) +
        (hasCar ? carPayment : 0) +
        (hasChildren ? childrenExpenses : 0);
      
      // Calculate annual surplus or deficit
      const annualSurplus = totalIncome - totalExpenses;
      
      // Update net worth
      netWorth += annualSurplus;
      
      // Apply student loan payments (simplified - 10 year repayment)
      let studentLoanPayment = 0;
      if (remainingStudentLoanDebt > 0 && i <= 10) {
        // Simple amortization for student loans - 10 year term with 5% interest rate
        const studentLoanInterestRate = 0.05; // 5% annual interest rate
        const studentLoanTerm = 10; // 10 year term
        
        // Calculate interest for this year
        const annualInterestPaid = remainingStudentLoanDebt * studentLoanInterestRate;
        
        // Calculate total annual payment (level payment amortization)
        const r = studentLoanInterestRate;
        const n = studentLoanTerm;
        const amortizedAnnualPayment = (studentLoanDebt * r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
        studentLoanPayment = amortizedAnnualPayment;
        
        // Principal reduction is annual payment minus interest
        const principalReduction = Math.min(
          amortizedAnnualPayment - annualInterestPaid,
          remainingStudentLoanDebt // Can't reduce more than remaining principal
        );
        
        // Add student loan payment to expenses (affects cash flow)
        currentExpenses += amortizedAnnualPayment;
        
        // Track student loan payment in the education expenses category
        educationExpensesData[i-1] = (educationExpensesData[i-1] || 0) + amortizedAnnualPayment;
        
        console.log(`Student loan payment for year ${i}: $${amortizedAnnualPayment.toFixed(2)} (interest: $${annualInterestPaid.toFixed(2)}, principal: $${principalReduction.toFixed(2)})`);
        console.log(`Student loan balance: $${remainingStudentLoanDebt.toFixed(2)} → $${(remainingStudentLoanDebt - principalReduction).toFixed(2)}`);
        
        // Update the student loan balance for this year
        remainingStudentLoanDebt = Math.max(0, remainingStudentLoanDebt - principalReduction);
      }
      
      // Apply education debt payments (amortized - 5 year repayment) for graduate school
      let educationLoanPayment = 0;
      if (hasEducationDebt && i > 1 && i <= 6) { // Start payments after first year
        // Simple amortization for education loans - 5 year term with 6% interest rate
        const educationLoanInterestRate = 0.06; // 6% annual interest rate
        const educationLoanTerm = 5; // 5 year term
        
        // Calculate interest for this year
        const annualInterestPaid = educationDebt * educationLoanInterestRate;
        
        // Find the education milestone to get the initial education cost
        const educationMilestone = sortedMilestones.find((m: { type: string }) => m.type === 'education');
        const initialEducationCost = educationMilestone?.educationCost || 0;
        
        // Calculate total annual payment (level payment amortization)
        const r = educationLoanInterestRate;
        const n = educationLoanTerm;
        const amortizedAnnualPayment = (initialEducationCost * r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
        educationLoanPayment = amortizedAnnualPayment;
        
        // Principal reduction is annual payment minus interest
        const principalReduction = Math.min(
          amortizedAnnualPayment - annualInterestPaid,
          educationDebt // Can't reduce more than remaining principal
        );
        
        // Add education loan payment to expenses (affects cash flow)
        currentExpenses += amortizedAnnualPayment;
        
        // Track education loan payment in the education expenses category
        educationExpensesData[i-1] = (educationExpensesData[i-1] || 0) + amortizedAnnualPayment;
        
        console.log(`Education loan payment for year ${i}: $${amortizedAnnualPayment.toFixed(2)} (interest: $${annualInterestPaid.toFixed(2)}, principal: $${principalReduction.toFixed(2)})`);
        console.log(`Education loan balance: $${educationDebt.toFixed(2)} → $${(educationDebt - principalReduction).toFixed(2)}`);
        
        // Update education debt for this year
        educationDebt = Math.max(0, educationDebt - principalReduction);
      }
      
      // Update mortgage principal for this year (amortization calculation)
      if (hasHome) {
        // Assume 30-year mortgage with 6% annual interest rate
        const mortgageInterestRate = 0.06; // 6% annual interest rate
        const mortgageTerm = 30; // 30-year mortgage
        
        // Calculate interest for this year
        const annualInterestPaid = mortgagePrincipal * mortgageInterestRate;
        
        // Find the home milestone to get the initial home value and down payment
        const homeMilestone = sortedMilestones.find((m: { type: string }) => m.type === 'home');
        const homeValue = homeMilestone?.homeValue || 0;
        const downPayment = homeMilestone?.homeDownPayment || 0;
        const initialMortgagePrincipal = homeValue - downPayment;
        
        // If the annual mortgage payment isn't specified in the milestone or is unreasonable,
        // calculate a payment based on a proper 30-year loan amortization
        let annualMortgagePayment = mortgagePayment;
        if (mortgagePayment <= 0 || mortgagePayment < annualInterestPaid) {
          // Calculate proper amortization payment
          const r = mortgageInterestRate;
          const n = mortgageTerm;
          annualMortgagePayment = (initialMortgagePrincipal * r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
        }
        
        // Principal reduction is mortgage payment minus interest
        const principalReduction = Math.min(
          annualMortgagePayment - annualInterestPaid,
          mortgagePrincipal // Can't reduce more than remaining principal
        );
        
        // Add mortgage payment to expenses (affects cash flow)
        currentExpenses += annualMortgagePayment;
        
        console.log(`Mortgage payment for year ${i}: $${annualMortgagePayment.toFixed(2)} (interest: $${annualInterestPaid.toFixed(2)}, principal: $${principalReduction.toFixed(2)})`);
        console.log(`Mortgage balance: $${mortgagePrincipal.toFixed(2)} → $${(mortgagePrincipal - principalReduction).toFixed(2)}`);
        
        // Update mortgage principal
        mortgagePrincipal = Math.max(0, mortgagePrincipal - principalReduction);
      }
      
      // Update housing value with appreciation (3% per year)
      if (hasHome) {
        homeValue = Math.round(homeValue * 1.03);
      }
      
      // Update car loan principal for this year (amortization calculation)
      if (hasCar) {
        // Assume 5-year car loan with 5% annual interest rate
        const carInterestRate = 0.05; // 5% annual interest rate
        const carLoanTerm = 5; // 5-year car loan
        
        // Calculate interest for this year
        const annualInterestPaid = carLoanPrincipal * carInterestRate;
        
        // Find the car milestone to get the initial car value and down payment
        const carMilestone = sortedMilestones.find((m: { type: string }) => m.type === 'car');
        const carMilestoneValue = carMilestone?.carValue || 0;
        const downPayment = carMilestone?.carDownPayment || 0;
        const initialCarLoanPrincipal = carMilestoneValue - downPayment;
        
        // If the annual car payment isn't specified in the milestone or is unreasonable,
        // calculate a payment based on a proper 5-year loan amortization
        let annualCarPayment = carPayment;
        if (carPayment <= 0 || carPayment < annualInterestPaid) {
          // Calculate proper amortization payment
          const r = carInterestRate;
          const n = carLoanTerm;
          annualCarPayment = (initialCarLoanPrincipal * r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
        }
        
        // Principal reduction is car payment minus interest
        const principalReduction = Math.min(
          annualCarPayment - annualInterestPaid,
          carLoanPrincipal // Can't reduce more than remaining principal
        );
        
        // Add car payment to expenses (affects cash flow)
        currentExpenses += annualCarPayment;
        
        console.log(`Car loan payment for year ${i}: $${annualCarPayment.toFixed(2)} (interest: $${annualInterestPaid.toFixed(2)}, principal: $${principalReduction.toFixed(2)})`);
        console.log(`Car loan balance: $${carLoanPrincipal.toFixed(2)} → $${(carLoanPrincipal - principalReduction).toFixed(2)}`);
        
        // Update car loan principal
        carLoanPrincipal = Math.max(0, carLoanPrincipal - principalReduction);
        
        // Update car value with depreciation (15% per year)
        carValue = Math.round(carValue * 0.85);
      }
      
      // Process spouse liabilities according to assumptions (amortized reduction)
      if (hasSpouse && spouseLiabilities > 0) {
        // Use the spouse loan term and interest rate from assumptions
        const spouseLoanInterestRate = spouseLoanRate / 100; // Convert from percentage to decimal
        
        // Calculate years into marriage
        const marriageMilestone = sortedMilestones.find((m: { type: string }) => m.type === 'marriage');
        const marriageYear = marriageMilestone?.yearsAway || 0;
        const yearsIntoMarriage = i - marriageYear;
        
        if (yearsIntoMarriage >= 0 && yearsIntoMarriage < spouseLoanTerm) {
          // Get the initial spouse liability amount when marriage started
          const initialSpouseLiabilities = marriageMilestone?.spouseLiabilities || 0;
          
          // Proper amortization calculation for level payment loan
          // Formula: Payment = (P * r * (1+r)^n) / ((1+r)^n - 1)
          // Where: P = principal, r = interest rate per period, n = number of periods
          const r = spouseLoanInterestRate;
          const n = spouseLoanTerm;
          const amortizedAnnualPayment = (initialSpouseLiabilities * r * Math.pow(1 + r, n)) / (Math.pow(1 + r, n) - 1);
          
          // Calculate interest for this year
          const annualInterestPaid = spouseLiabilities * spouseLoanInterestRate;
          
          // Principal reduction is annual payment minus interest
          const principalReduction = Math.min(
            amortizedAnnualPayment - annualInterestPaid,
            spouseLiabilities // Can't reduce more than remaining principal
          );
          
          // Subtract payment from net worth (via expenses - total expenses track this now)
          // We don't need to directly impact netWorth here anymore because it's handled by the overall cash flow
          // netWorth -= amortizedAnnualPayment;
          
          // Add spouse loan payment to the total expenses for this year
          // This ensures it impacts cash flow calculations
          currentExpenses += amortizedAnnualPayment;
          
          console.log(`Spouse loan payment for year ${i}: $${amortizedAnnualPayment.toFixed(2)} (interest: $${annualInterestPaid.toFixed(2)}, principal: $${principalReduction.toFixed(2)})`);
          console.log(`Spouse loan balance: $${spouseLiabilities.toFixed(2)} → $${(spouseLiabilities - principalReduction).toFixed(2)}`);
          
          // Update spouse liabilities
          spouseLiabilities = Math.max(0, spouseLiabilities - principalReduction);
        }
      }
      
      // Apply spouse asset growth according to assumptions
      if (hasSpouse && spouseAssets > 0) {
        // Use the spouse asset growth rate from assumptions
        const spouseAssetGrowthRate = spouseAssetGrowth / 100; // Convert from percentage to decimal
        
        // Only apply growth after the marriage occurs
        const marriageMilestone = sortedMilestones.find((m: { type: string }) => m.type === 'marriage');
        const marriageYear = marriageMilestone?.yearsAway || 0;
        const yearsIntoMarriage = i - marriageYear;
        
        if (yearsIntoMarriage > 0) { // Only apply growth after the first year of marriage
          // Calculate asset growth for this year
          const assetGrowthAmount = spouseAssets * spouseAssetGrowthRate;
          
          // Add growth to spouse assets
          spouseAssets += assetGrowthAmount;
          
          // Add growth to net worth
          netWorth += assetGrowthAmount;
          
          console.log(`Spouse asset growth for year ${i}: $${assetGrowthAmount.toFixed(2)} (${spouseAssetGrowth}% of $${spouseAssets.toFixed(2)})`);
        }
      }
      
      // Calculate total assets and liabilities
      // For assets, we count the positive components of netWorth (savings from income)
      // plus home value, car value, and spouse assets if applicable
      const totalAssets = Math.max(0, netWorth) + 
                          (hasHome ? homeValue : 0) + 
                          (hasCar ? carValue : 0) + 
                          (hasSpouse ? spouseAssets : 0);
                          
      // For liabilities, we track all debts separately
      // Student loan debt is tracked separately as a dedicated liability
      const totalLiabilities = mortgagePrincipal + 
                              carLoanPrincipal + 
                              remainingStudentLoanDebt + 
                              educationDebt + 
                              (hasSpouse ? spouseLiabilities : 0);
      
      // Update data arrays for this year
      netWorthData.push(netWorth);
      assetsData.push(totalAssets);  
      liabilitiesData.push(totalLiabilities);
      homeValueData.push(hasHome ? homeValue : 0);
      mortgageData.push(mortgagePrincipal);
      carValueData.push(hasCar ? carValue : 0);
      carLoanData.push(carLoanPrincipal);
      studentLoanData.push(remainingStudentLoanDebt);
      
      // Store income values for stacked chart
      incomeData.push(currentIncome);
      spouseIncomeData.push(hasSpouse ? spouseIncome : 0);
      expensesData.push(totalExpenses);
      ages.push(age + i);
    }
    
    return {
      netWorth: netWorthData,
      income: incomeData,
      spouseIncome: spouseIncomeData,
      expenses: expensesData,
      assets: assetsData, // Use properly tracked asset data that includes home value
      liabilities: liabilitiesData, // Use properly tracked liability data that includes mortgage
      homeValue: homeValueData, // Track home value separately
      mortgage: mortgageData, // Track mortgage separately
      carValue: carValueData, // Track car value separately
      carLoan: carLoanData, // Track car loan separately
      studentLoan: studentLoanData, // Track student loan separately
      ages: ages
    };
  };
  
  // Create a state for projection data
  const [projectionData, setProjectionData] = useState<any>({
    netWorth: [startingSavings],
    ages: [age],
    income: [income],
    expenses: [expenses]
  });
  
  // Update projection data when inputs change
  useEffect(() => {
    console.log("Inputs changed, recalculating projection data with milestones:", milestones);
    setProjectionData(generateProjectionData(milestones));
  }, [income, expenses, startingSavings, studentLoanDebt, milestones, timeframe, incomeGrowth, age, 
      spouseLoanTerm, spouseLoanRate, spouseAssetGrowth]); // Include assumptions in dependency array
  
  // Generate financial advice based on current financial state
  useEffect(() => {
    // Create a financial state object based on current values
    const financialState: FinancialState = {
      income: income,
      expenses: expenses,
      savings: startingSavings,
      studentLoanDebt: studentLoanDebt,
      otherDebt: financialProfile?.otherDebtAmount || 0,
    };
    
    // Add home-related values if milestones include a home purchase
    const homeMilestone = milestones?.find(m => m.type === 'home');
    if (homeMilestone) {
      financialState.homeValue = homeMilestone.homeValue;
      financialState.homeDownPayment = homeMilestone.homeDownPayment;
      financialState.homeMonthlyPayment = homeMilestone.homeMonthlyPayment;
    }
    
    // Add car-related values if milestones include a car purchase
    const carMilestone = milestones?.find(m => m.type === 'car');
    if (carMilestone) {
      financialState.carValue = carMilestone.carValue;
      financialState.carDownPayment = carMilestone.carDownPayment;
      financialState.carMonthlyPayment = carMilestone.carMonthlyPayment;
    }
    
    // Generate financial advice
    const advice = generateFinancialAdvice(financialState);
    setFinancialAdvice(advice);
  }, [income, expenses, startingSavings, studentLoanDebt, financialProfile, milestones]);

  useEffect(() => {
    if (chartRef.current) {
      const ctx = chartRef.current.getContext("2d");
      if (ctx) {
        // Destroy previous chart instance if it exists
        if (chartInstance.current) {
          chartInstance.current.destroy();
        }
        
        // Create new chart
        chartInstance.current = createMainProjectionChart(ctx, projectionData, activeTab);
      }
    }

    // Cleanup on unmount
    return () => {
      if (chartInstance.current) {
        chartInstance.current.destroy();
      }
    };
  }, [projectionData, activeTab, timeframe]);

  return (
    <div className="max-w-7xl mx-auto">
      <h1 className="text-2xl font-display font-semibold text-gray-800 mb-6">Financial Projections</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
        <Card>
          <CardContent className="pt-6">
            <h3 className="text-lg font-medium mb-4">Projection Settings</h3>
            
            <div className="space-y-4">
              <div>
                <Label htmlFor="age">Current Age</Label>
                <Input 
                  id="age" 
                  type="number" 
                  value={age} 
                  onChange={(e) => setAge(Number(e.target.value))} 
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="timeframe">Timeframe</Label>
                <select 
                  id="timeframe"
                  className="w-full border border-gray-300 rounded px-3 py-2 mt-1"
                  value={timeframe}
                  onChange={(e) => setTimeframe(e.target.value)}
                >
                  <option>5 Years</option>
                  <option>10 Years</option>
                  <option>20 Years</option>
                </select>
              </div>
              
              <div>
                <Label htmlFor="savings">Starting Savings ($)</Label>
                <Input 
                  id="savings" 
                  type="number" 
                  value={startingSavings} 
                  onChange={(e) => setStartingSavings(Number(e.target.value))} 
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="studentLoanDebt">Student Loan Debt ($)</Label>
                <Input 
                  id="studentLoanDebt" 
                  type="number" 
                  value={studentLoanDebt} 
                  onChange={(e) => setStudentLoanDebt(Number(e.target.value))} 
                  className="mt-1"
                />
                {includedCollegeCalc && (
                  <p className="text-xs text-gray-500 mt-1">
                    Using student loan amount from {includedCollegeCalc.college?.name}
                  </p>
                )}
              </div>
              
              <div>
                <Label htmlFor="income">Annual Income ($)</Label>
                <Input 
                  id="income" 
                  type="number" 
                  value={income} 
                  onChange={(e) => setIncome(Number(e.target.value))} 
                  className="mt-1"
                />
                {includedCareerCalc && (
                  <p className="text-xs text-gray-500 mt-1">
                    Using salary from {includedCareerCalc.career?.title} career
                  </p>
                )}
              </div>
              
              <div>
                <Label htmlFor="expenses">Annual Expenses ($)</Label>
                <Input 
                  id="expenses" 
                  type="number" 
                  value={expenses} 
                  onChange={(e) => setExpenses(Number(e.target.value))} 
                  className="mt-1"
                />
                {locationCostData && (
                  <p className="text-xs text-gray-500 mt-1">
                    Adjusted for cost of living in {locationCostData.city || locationCostData.zip_code}
                  </p>
                )}
              </div>
              
              <div>
                <Label>Income Growth Rate: {incomeGrowth}%</Label>
                <Slider
                  value={[incomeGrowth]}
                  onValueChange={(value) => setIncomeGrowth(value[0])}
                  min={0}
                  max={10}
                  step={0.5}
                  className="mt-2"
                />
              </div>
            </div>
            
            <Button 
              className="w-full mt-6"
              onClick={async () => {
                try {
                  // Adjust income based on location, but we don't need to adjust expenses again
                  // since they're already adjusted in the UI as part of the expenses state
                  const adjustedIncome = income * (locationCostData?.income_adjustment_factor || 1.0);
                  const adjustedExpenses = expenses; // expenses is already adjusted via useEffect
                     
                  const response = await fetch('/api/financial-projections', {
                    method: 'POST',
                    headers: {
                      'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                      userId,
                      projectionName: `Projection - ${new Date().toLocaleDateString()}`,
                      timeframe: years,
                      startingAge: age,
                      startingSavings,
                      income: Math.round(adjustedIncome),
                      expenses: Math.round(adjustedExpenses),
                      incomeGrowth,
                      studentLoanDebt,
                      projectionData: JSON.stringify(projectionData),
                      includesCollegeCalculation: !!includedCollegeCalc,
                      includesCareerCalculation: !!includedCareerCalc,
                      collegeCalculationId: includedCollegeCalc?.id || null,
                      careerCalculationId: includedCareerCalc?.id || null,
                      locationAdjusted: !!locationCostData,
                      locationZipCode: userData?.zipCode || null,
                      costOfLivingIndex: locationCostData ? 
                        locationCostData.income_adjustment_factor || 1.0 : null,
                      incomeAdjustmentFactor: locationCostData?.income_adjustment_factor || null,
                    }),
                  });
                  
                  if (response.ok) {
                    alert('Projection saved successfully!');
                  } else {
                    throw new Error('Failed to save projection');
                  }
                } catch (error) {
                  console.error('Error saving projection:', error);
                  alert('Failed to save projection. Please try again.');
                }
              }}
            >
              Save Projection
            </Button>
          </CardContent>
        </Card>
        
        <Card className="md:col-span-3">
          <CardContent className="p-6">
            <div className="flex flex-wrap mb-4">
              <button 
                className={`mr-2 mb-2 px-4 py-2 ${activeTab === 'netWorth' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} rounded-full text-sm`}
                onClick={() => setActiveTab('netWorth')}
              >
                Net Worth
              </button>
              <button 
                className={`mr-2 mb-2 px-4 py-2 ${activeTab === 'income' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} rounded-full text-sm`}
                onClick={() => setActiveTab('income')}
              >
                Income
              </button>
              <button 
                className={`mr-2 mb-2 px-4 py-2 ${activeTab === 'expenses' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} rounded-full text-sm`}
                onClick={() => setActiveTab('expenses')}
              >
                Expenses
              </button>
              <button 
                className={`mr-2 mb-2 px-4 py-2 ${activeTab === 'assets' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} rounded-full text-sm`}
                onClick={() => setActiveTab('assets')}
              >
                Assets
              </button>
              <button 
                className={`mr-2 mb-2 px-4 py-2 ${activeTab === 'liabilities' ? 'bg-primary text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'} rounded-full text-sm`}
                onClick={() => setActiveTab('liabilities')}
              >
                Liabilities
              </button>
            </div>
            
            <div className="h-96">
              <canvas ref={chartRef}></canvas>
            </div>
            
            <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
              <div className="bg-gray-100 p-4 rounded-lg">
                <p className="text-sm text-gray-500 uppercase">Net Worth at {projectionData?.ages?.length > 0 ? projectionData.ages[projectionData.ages.length - 1] : age}</p>
                <p className="text-2xl font-mono font-medium text-gray-800">
                  ${projectionData?.netWorth?.length > 0 ? projectionData.netWorth[projectionData.netWorth.length - 1].toLocaleString() : startingSavings.toLocaleString()}
                </p>
              </div>
              
              <div className="bg-gray-100 p-4 rounded-lg">
                <p className="text-sm text-gray-500 uppercase">Total Savings</p>
                <p className="text-2xl font-mono font-medium text-gray-800">
                  ${projectionData?.netWorth?.length > 0 ? (projectionData.netWorth[projectionData.netWorth.length - 1] - startingSavings).toLocaleString() : '0'}
                </p>
              </div>
              
              <div className="bg-gray-100 p-4 rounded-lg">
                <p className="text-sm text-gray-500 uppercase">Annual Savings Rate</p>
                <p className="text-2xl font-mono font-medium text-gray-800">
                  {projectionData?.income?.length > 0 && projectionData?.expenses?.length > 0 ? 
                    Math.round((projectionData.income[0] - projectionData.expenses[0]) / projectionData.income[0] * 100) : 
                    Math.round((income - expenses) / income * 100)}%
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
      
      {/* Card to display location-based cost of living or 'Add Location' card if no data */}
      {locationCostData ? (
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Location Cost of Living</h3>
              <div className="flex items-center">
                <div className="bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium mr-2">
                  {locationCostData.city || 'Your Location'}, {locationCostData.state} ({userData?.zipCode})
                </div>
                <UpdateLocationDialog userData={userData} />
              </div>
            </div>
            
            <p className="text-gray-600 mb-4">
              Your financial projections are adjusted based on the cost of living in your location. 
              {locationCostData.income_adjustment_factor > 1 
                ? ` This area has a ${((locationCostData.income_adjustment_factor - 1) * 100).toFixed(0)}% higher cost of living than the national average.`
                : ` This area has a ${((1 - locationCostData.income_adjustment_factor) * 100).toFixed(0)}% lower cost of living than the national average.`
              }
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div className="bg-blue-50 p-4 rounded-lg text-center">
                <p className="text-sm text-gray-500 uppercase">Income Adjustment</p>
                <p className="text-2xl font-medium text-primary">
                  {(locationCostData.income_adjustment_factor * 100).toFixed(0)}%
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {locationCostData.income_adjustment_factor > 1 ? 'Higher' : 'Lower'} than average
                </p>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg text-center">
                <p className="text-sm text-gray-500 uppercase">Housing Cost</p>
                <p className="text-2xl font-medium text-primary">
                  ${(locationCostData.housing || 0).toFixed(0)}
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  Monthly cost
                </p>
              </div>
              
              <div className="bg-blue-50 p-4 rounded-lg text-center">
                <p className="text-sm text-gray-500 uppercase">Total Monthly Cost</p>
                <p className="text-2xl font-medium text-primary">
                  ${((locationCostData.housing || 0) + 
                    (locationCostData.food || 0) + 
                    (locationCostData.transportation || 0) + 
                    (locationCostData.healthcare || 0) + 
                    (locationCostData.personal_insurance || 0) + 
                    (locationCostData.entertainment || 0) +
                    (locationCostData.services || 0)).toFixed(0)}
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  Sum of all expense categories
                </p>
              </div>
            </div>
            
            <div className="mt-6">
              <h4 className="text-sm font-medium mb-3">Detailed Cost Breakdown</h4>
              <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                <div>
                  <p className="text-xs text-gray-500">Housing</p>
                  <div className="flex items-center mt-1">
                    <div className="h-2 bg-blue-100 rounded-full w-full">
                      <div 
                        className="h-2 bg-blue-500 rounded-full" 
                        style={{ width: `${Math.min((locationCostData.housing || 0) / 25, 100)}%` }}
                      ></div>
                    </div>
                    <span className="text-xs ml-2">${(locationCostData.housing || 0).toFixed(0)}</span>
                  </div>
                </div>
                
                <div>
                  <p className="text-xs text-gray-500">Food</p>
                  <div className="flex items-center mt-1">
                    <div className="h-2 bg-blue-100 rounded-full w-full">
                      <div 
                        className="h-2 bg-blue-500 rounded-full" 
                        style={{ width: `${Math.min((locationCostData.food || 0) / 25, 100)}%` }}
                      ></div>
                    </div>
                    <span className="text-xs ml-2">${(locationCostData.food || 0).toFixed(0)}</span>
                  </div>
                </div>
                
                <div>
                  <p className="text-xs text-gray-500">Transportation</p>
                  <div className="flex items-center mt-1">
                    <div className="h-2 bg-blue-100 rounded-full w-full">
                      <div 
                        className="h-2 bg-blue-500 rounded-full" 
                        style={{ width: `${Math.min((locationCostData.transportation || 0) / 25, 100)}%` }}
                      ></div>
                    </div>
                    <span className="text-xs ml-2">${(locationCostData.transportation || 0).toFixed(0)}</span>
                  </div>
                </div>
                
                <div>
                  <p className="text-xs text-gray-500">Healthcare</p>
                  <div className="flex items-center mt-1">
                    <div className="h-2 bg-blue-100 rounded-full w-full">
                      <div 
                        className="h-2 bg-blue-500 rounded-full" 
                        style={{ width: `${Math.min((locationCostData.healthcare || 0) / 25, 100)}%` }}
                      ></div>
                    </div>
                    <span className="text-xs ml-2">${(locationCostData.healthcare || 0).toFixed(0)}</span>
                  </div>
                </div>
                
                <div>
                  <p className="text-xs text-gray-500">Insurance</p>
                  <div className="flex items-center mt-1">
                    <div className="h-2 bg-blue-100 rounded-full w-full">
                      <div 
                        className="h-2 bg-blue-500 rounded-full" 
                        style={{ width: `${Math.min((locationCostData.personal_insurance || 0) / 25, 100)}%` }}
                      ></div>
                    </div>
                    <span className="text-xs ml-2">${(locationCostData.personal_insurance || 0).toFixed(0)}</span>
                  </div>
                </div>
                
                <div>
                  <p className="text-xs text-gray-500">Entertainment</p>
                  <div className="flex items-center mt-1">
                    <div className="h-2 bg-blue-100 rounded-full w-full">
                      <div 
                        className="h-2 bg-blue-500 rounded-full" 
                        style={{ width: `${Math.min((locationCostData.entertainment || 0) / 25, 100)}%` }}
                      ></div>
                    </div>
                    <span className="text-xs ml-2">${(locationCostData.entertainment || 0).toFixed(0)}</span>
                  </div>
                </div>
                
                <div>
                  <p className="text-xs text-gray-500">Services</p>
                  <div className="flex items-center mt-1">
                    <div className="h-2 bg-blue-100 rounded-full w-full">
                      <div 
                        className="h-2 bg-blue-500 rounded-full" 
                        style={{ width: `${Math.min((locationCostData.services || 0) / 25, 100)}%` }}
                      ></div>
                    </div>
                    <span className="text-xs ml-2">${(locationCostData.services || 0).toFixed(0)}</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="mt-6 pt-4 border-t border-gray-200">
              <p className="text-sm text-gray-600">
                <span className="font-medium">Impact on your finances:</span> In {locationCostData.city || 'your location'}, 
                {(locationCostData.income_adjustment_factor || 0) >= 1 
                  ? ` salaries tend to be higher to compensate for the increased cost of living.`
                  : ` your expenses will be lower, but salaries may also be lower than in more expensive areas.`
                }
              </p>
            </div>
          </CardContent>
        </Card>
      ) : (
        <Card className="mb-6">
          <CardContent className="p-6">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-medium">Location Cost of Living</h3>
              <div className="flex items-center">
                <div className="bg-primary/10 text-primary px-3 py-1 rounded-full text-sm font-medium mr-2">
                  {userData?.zipCode || "No location set"}
                </div>
                <UpdateLocationDialog userData={userData} />
              </div>
            </div>
            
            <div className="py-8 text-center">
              <svg 
                className="mx-auto h-12 w-12 text-gray-400" 
                xmlns="http://www.w3.org/2000/svg" 
                fill="none" 
                viewBox="0 0 24 24" 
                stroke="currentColor"
              >
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={1.5} 
                  d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" 
                />
                <path 
                  strokeLinecap="round" 
                  strokeLinejoin="round" 
                  strokeWidth={1.5} 
                  d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" 
                />
              </svg>
              <h3 className="mt-2 text-sm font-medium text-gray-900">No location data available</h3>
              <p className="mt-1 text-sm text-gray-500">
                {userData?.zipCode 
                  ? `We don't have cost of living data for your current zip code (${userData.zipCode}).
                    Try changing to 90210 (Beverly Hills), 02142 (Cambridge), 94103 (San Francisco), or 30328 (Atlanta) to see data.`
                  : "Set your location to adjust financial projections based on cost of living."}
              </p>
              <div className="mt-6">
                <UpdateLocationDialog userData={userData} />
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      
      {/* Card to display included college and career calculations */}
      <Card className="mb-6">
        <CardContent className="p-6">
          <h3 className="text-lg font-medium mb-4">Included Calculations</h3>
          <p className="text-gray-600 mb-4">
            These saved calculations are factored into your financial projections.
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button variant="ghost" size="icon" className="h-6 w-6 rounded-full p-0 ml-1">
                    <Info className="h-4 w-4" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent>
                  <p className="max-w-xs">
                    Your age is derived from birth year, student debt comes from college calculations, 
                    and starting income uses your career's entry-level salary.
                    {locationCostData && " Income and expenses are adjusted based on your location's cost of living."}
                  </p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </p>
          
          {isLoading ? (
            <div className="space-y-4">
              <Skeleton className="h-16 w-full" />
              <Skeleton className="h-16 w-full" />
            </div>
          ) : (
            <div className="space-y-4">
              {/* College calculation section */}
              <div className="border rounded-lg p-4">
                <div className="flex items-center mb-2">
                  <School className="h-5 w-5 text-primary mr-2" />
                  <h4 className="font-medium">College</h4>
                </div>
                
                {includedCollegeCalc ? (
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">College:</span>
                      <span className="font-medium">{includedCollegeCalc.college?.name || "Unknown College"}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Student Loan Amount:</span>
                      <span className="font-medium">{formatCurrency(includedCollegeCalc.studentLoanAmount || 0)}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Total Cost:</span>
                      <span className="font-medium">{formatCurrency(includedCollegeCalc.netPrice)}</span>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-3">
                    <span className="text-gray-400">No college calculation included</span>
                    <div className="mt-2">
                      <Button variant="outline" size="sm" onClick={() => window.location.href = "/net-price-calculator"}>
                        Add College Cost
                      </Button>
                    </div>
                  </div>
                )}
              </div>
              
              {/* Career calculation section */}
              <div className="border rounded-lg p-4">
                <div className="flex items-center mb-2">
                  <Briefcase className="h-5 w-5 text-primary mr-2" />
                  <h4 className="font-medium">Career</h4>
                </div>
                
                {includedCareerCalc ? (
                  <div className="space-y-2">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Career:</span>
                      <span className="font-medium">{includedCareerCalc.career?.title || "Unknown Career"}</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Starting Salary:</span>
                      <span className="font-medium">
                        {formatCurrency(includedCareerCalc.entryLevelSalary || includedCareerCalc.projectedSalary)}
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Education:</span>
                      <span className="font-medium">{includedCareerCalc.education || "Not specified"}</span>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-3">
                    <span className="text-gray-400">No career calculation included</span>
                    <div className="mt-2">
                      <Button variant="outline" size="sm" onClick={() => window.location.href = "/career-builder"}>
                        Add Career
                      </Button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
      
      {/* Financial Advice Section */}
      {financialAdvice.length > 0 && (
        <Card className="mb-6">
          <CardContent className="p-6">
            <AdvicePanel 
              advice={financialAdvice} 
              title="Financial Recommendations" 
              showCount={true} 
            />
          </CardContent>
        </Card>
      )}
      
      {/* Life Milestones Section */}
      <MilestonesSection 
        userId={userId} 
        onMilestoneChange={() => {
          console.log("Milestone changed, forcing a refresh...");
          
          // Force a re-fetch of milestone data
          queryClient.invalidateQueries({ queryKey: ['/api/milestones/user', userId] });
          
          // Force a re-render by updating a random input value slightly and then back
          // This is a workaround to ensure React notices the dependency changes
          const originalIncome = income;
          setIncome(originalIncome + 1);
          setTimeout(() => {
            setIncome(originalIncome);
          }, 10);
        }} 
      />
    </div>
  );
};

// UpdateLocationDialog component for changing the zip code
interface UpdateLocationDialogProps {
  userData: User | undefined;
}

const UpdateLocationDialog = ({ userData }: UpdateLocationDialogProps) => {
  const [open, setOpen] = useState(false);
  const [newZipCode, setNewZipCode] = useState(userData?.zipCode || '');
  const queryClient = useQueryClient(); // For cache invalidation

  const updateZipCodeMutation = useMutation({
    mutationFn: async (zipCode: string) => {
      const response = await fetch(`/api/users/${userData?.id}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          zipCode
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to update location');
      }
      
      return response.json();
    },
    onSuccess: () => {
      // Invalidate queries that depend on the user data or location data
      queryClient.invalidateQueries({ queryKey: ['/api/users', userData?.id] });
      queryClient.invalidateQueries({ queryKey: ['/api/location-cost-of-living/zip', newZipCode] });
      setOpen(false);
    }
  });

  const handleUpdateLocation = () => {
    if (newZipCode && newZipCode.length === 5 && /^\d+$/.test(newZipCode)) {
      updateZipCodeMutation.mutate(newZipCode);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="h-7">
          Change
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Update Location</DialogTitle>
          <DialogDescription>
            Change your location to recalculate financial projections based on the new cost of living.
            This change will be applied across all parts of the application.
          </DialogDescription>
        </DialogHeader>
        <div className="grid gap-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="zipCode">Zip Code</Label>
            <Input
              id="zipCode"
              placeholder="Enter zip code"
              value={newZipCode}
              onChange={(e) => setNewZipCode(e.target.value)}
              maxLength={5}
              pattern="[0-9]{5}"
            />
            <p className="text-xs text-gray-500">
              Enter a valid US 5-digit zip code. Try 90210 (Beverly Hills), 02142 (Cambridge), 94103 (San Francisco), or 30328 (Atlanta) for example data.
            </p>
          </div>
        </div>
        <DialogFooter>
          <Button 
            onClick={handleUpdateLocation}
            disabled={updateZipCodeMutation.isPending || !newZipCode || newZipCode.length !== 5 || !/^\d+$/.test(newZipCode)}
          >
            {updateZipCodeMutation.isPending ? "Updating..." : "Update Location"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default FinancialProjections;
