// In FinancialProjections.tsx, modify the save projection function:
const saveProjection = async () => {
  try {
    // Validate required fields
    if (!projectionName || !projectionData) {
      throw new Error('Missing required fields');
    }
    
    // Prepare the projection data
    const projectionToSave = {
      userId,
      name: projectionName,
      timeframe: years,
      startingAge: age,
      startingSavings,
      income: Math.round(income),
      expenses: Math.round(expenses),
      incomeGrowth,
      studentLoanDebt,
      projectionData: JSON.stringify(projectionData),
      includesCollegeCalculation: !!includedCollegeCalc,
      includesCareerCalculation: !!includedCareerCalc,
      collegeCalculationId: includedCollegeCalc?.id || null,
      careerCalculationId: includedCareerCalc?.id || null,
      locationAdjusted: !!locationCostData,
      locationZipCode: userData?.zipCode || null,
      costOfLivingIndex: locationCostData?.income_adjustment_factor || null,
      incomeAdjustmentFactor: locationCostData?.income_adjustment_factor || null,
      emergencyFundAmount,
      personalLoanTermYears,
      personalLoanInterestRate,
    };
    
    // Validate the projection data
    if (!projectionToSave.timeframe || !projectionToSave.startingAge || 
        !projectionToSave.startingSavings || !projectionToSave.income || 
        !projectionToSave.expenses || !projectionToSave.incomeGrowth) {
      throw new Error('Missing required projection data');
    }
    
    const response = await fetch('/api/financial-projections', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(projectionToSave),
    });
    
    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.message || 'Failed to save projection');
    }
    
    const savedProjection = await response.json();
    
    // Update the UI
    toast.success('Projection saved successfully');
    
    // Refresh the saved projections list
    queryClient.invalidateQueries(['/api/financial-projections', userId]);
    
    return savedProjection;
    
  } catch (error) {
    console.error('Error saving projection:', error);
    toast.error(error.message || 'Failed to save projection');
    throw error;
  }
};