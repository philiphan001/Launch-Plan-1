// 1. First, let's add a loading state for projections
const [isLoadingProjection, setIsLoadingProjection] = useState(false);

// 2. Modify the loadSavedProjection function
const loadSavedProjection = async (projectionId: number) => {
  try {
    setIsLoadingProjection(true);
    setProjectionData(null); // Clear existing data
    
    const response = await fetch(`/api/financial-projections/detail/${projectionId}`);
    if (!response.ok) {
      throw new Error(`Failed to load projection: ${response.statusText}`);
    }
    
    const savedProjection = await response.json();
    
    // Validate the projection data
    if (!savedProjection || !savedProjection.projectionData) {
      throw new Error('Invalid projection data');
    }
    
    // Parse projection data if it's a string
    const projectionData = typeof savedProjection.projectionData === 'string' 
      ? JSON.parse(savedProjection.projectionData)
      : savedProjection.projectionData;
    
    // Validate the required arrays exist
    if (!Array.isArray(projectionData.ages) || !Array.isArray(projectionData.netWorth) ||
        !Array.isArray(projectionData.income) || !Array.isArray(projectionData.expenses)) {
      throw new Error('Invalid projection data structure');
    }
    
    // Update all state values in a single batch
    const stateUpdates = {
      projectionName: savedProjection.name,
      timeframe: `${savedProjection.timeframe} Years`,
      age: savedProjection.startingAge,
      startingSavings: savedProjection.startingSavings,
      income: savedProjection.income,
      expenses: savedProjection.expenses,
      incomeGrowth: savedProjection.incomeGrowth,
      studentLoanDebt: savedProjection.studentLoanDebt,
      emergencyFundAmount: savedProjection.emergencyFundAmount,
      personalLoanTermYears: savedProjection.personalLoanTermYears,
      personalLoanInterestRate: savedProjection.personalLoanInterestRate,
      projectionData: {
        ...projectionData,
        _key: `projection-${projectionId}-${new Date().getTime()}`
      }
    };
    
    // Apply all state updates at once
    setProjectionName(stateUpdates.projectionName);
    setTimeframe(stateUpdates.timeframe);
    setAge(stateUpdates.age);
    setStartingSavings(stateUpdates.startingSavings);
    setIncome(stateUpdates.income);
    setExpenses(stateUpdates.expenses);
    setIncomeGrowth(stateUpdates.incomeGrowth);
    setStudentLoanDebt(stateUpdates.studentLoanDebt);
    setEmergencyFundAmount(stateUpdates.emergencyFundAmount);
    setPersonalLoanTermYears(stateUpdates.personalLoanTermYears);
    setPersonalLoanInterestRate(stateUpdates.personalLoanInterestRate);
    setProjectionData(stateUpdates.projectionData);
    
    // Switch to view tab
    setMainTab("view");
    
  } catch (error) {
    console.error('Error loading projection:', error);
    toast.error('Failed to load projection. Please try again.');
  } finally {
    setIsLoadingProjection(false);
  }
};

// 3. Modify the view TabsContent to handle loading and null states
<TabsContent value="view">
  <div className="p-6">
    {isLoadingProjection ? (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    ) : !projectionData ? (
      <div className="text-center text-gray-500">
        No projection data available
      </div>
    ) : (
      <>
        <h3 className="text-xl font-semibold mb-4">Projection Details</h3>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="bg-white p-4 rounded-lg shadow">
            <h4 className="font-medium mb-2">Net Worth Over Time</h4>
            {projectionData.netWorth && (
              <LineChart
                data={projectionData.netWorth}
                labels={projectionData.ages}
              />
            )}
          </div>
          <div className="bg-white p-4 rounded-lg shadow">
            <h4 className="font-medium mb-2">Income vs Expenses</h4>
            {projectionData.income && projectionData.expenses && (
              <DualLineChart
                data1={projectionData.income}
                data2={projectionData.expenses}
                labels={projectionData.ages}
              />
            )}
          </div>
        </div>
        
        {/* Cash Flow Table with safety check */}
        {projectionData.ages && projectionData.income && projectionData.expenses && (
          <div className="mt-6">
            <h4 className="font-medium mb-2">Cash Flow Details</h4>
            <CashFlowTable
              ages={projectionData.ages}
              income={projectionData.income}
              expenses={projectionData.expenses}
              netWorth={projectionData.netWorth}
            />
          </div>
        )}
      </>
    )}
  </div>
</TabsContent>